const regions = {
  graham: [
    [-97.1448009, 49.8906712],
    [-97.1420564, 49.8910436],
    [-97.1418526, 49.8906842],
    [-97.1374752, 49.891645],
    [-97.138312, 49.8933107],
    [-97.142698, 49.8922541],
    [-97.1432559, 49.893201],
    [-97.1445327, 49.8927517],
    [-97.1444576, 49.8926273],
    [-97.1454446, 49.8919499],
    [-97.1448009, 49.8906712],
  ],
  main: [
    [-97.1387638, 49.8930709],
    [-97.13614, 49.8935543],
    [-97.1357967, 49.8966506],
    [-97.1377017, 49.8971556],
    [-97.1402873, 49.8970519],
    [-97.1407379, 49.8955383],
    [-97.1399011, 49.8951513],
    [-97.1387638, 49.8930709],
  ],
  portage: [
    [-97.149592, 49.8889],
    [-97.1484333, 49.889135],
    [-97.1491414, 49.8906833],
    [-97.1453219, 49.891568],
    [-97.1456438, 49.8922039],
    [-97.1443992, 49.8925633],
    [-97.1445924, 49.8928813],
    [-97.1432834, 49.8931716],
    [-97.1419745, 49.8935448],
    [-97.1429401, 49.8953418],
    [-97.1522098, 49.8932269],
  ],
  stmary: [
    [-97.1487337, 49.8897571],
    [-97.1467984, 49.8862803],
    [-97.1402538, 49.8877734],
    [-97.1420348, 49.8909945],
    [-97.1433979, 49.8906787],
    [-97.1432155, 49.8903884],
    [-97.1471208, 49.8894691],
    [-97.147432, 49.8900566],
  ],
};

export default function regionFinder(lat, lon) {
  for (let keys = Object.keys(regions), i = 0; i < keys.length; i++) {
    let key = keys[i];
    let region = regions[key];
    if (isLatLonInsidePolygon(lon, lat, region)) {
      return key;
    }
  }

  return 'none';
}

// Adapted from https://stackoverflow.com/a/31813714/760389
function isLatLonInsidePolygon(y, x, polyPoints) {
  var inside = false;
  for (var i = 0, j = polyPoints.length - 1; i < polyPoints.length; j = i++) {
    var xi = polyPoints[i][1],
      yi = polyPoints[i][0];
    var xj = polyPoints[j][1],
      yj = polyPoints[j][0];

    var intersect =
      yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }

  return inside;
}
